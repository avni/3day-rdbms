CREATE TABLE census_cps_all (
    hrecord int,
    h_seq int,
    hhpos int,
    hunits int,
    hefaminc int,
    h_respnm int,
    h_year int,
    h_hhtype int,
    h_numper int,
    hnumfam int,
    h_type int,
    h_month int,
    h_mis int,
    h_hhnum int,
    h_livqrt int,
    h_typebc int,
    h_tenure int,
    h_telhhd int,
    h_telavl int,
    h_telint int,
    gereg int,
    gestcen int,
    gestfips int,
    gtcbsa int,
    gtco int,
    gtcbsast int,
    gtmetsta int,
    gtindvpc int,
    gtcbsasz int,
    gtcsa int,
    hunder15 int,
    hh5to18 int,
    hhotlun int,
    hhotno int,
    hflunch int,
    hflunno int,
    hpublic int,
    hlorent int,
    hfoodsp int,
    hfoodno int,
    hfoodmo int,
    hengast int,
    hengval int,
    hinc_ws int,
    hwsval int,
    hinc_se int,
    hseval int,
    hinc_fr int,
    hfrval int,
    hinc_uc int,
    hucval int,
    hinc_wc int,
    hwcval int,
    hss_yn int,
    hssval int,
    hssi_yn int,
    hssival int,
    hpaw_yn int,
    hpawval int,
    hvet_yn int,
    hvetval int,
    hsur_yn int,
    hsurval int,
    hdis_yn int,
    hdisval int,
    hret_yn int,
    hretval int,
    hint_yn int,
    hintval int,
    hdiv_yn int,
    hdivval int,
    hrnt_yn int,
    hrntval int,
    hed_yn int,
    hedval int,
    hcsp_yn int,
    hcspval int,
    halm_yn int,
    halmval int,
    hfin_yn int,
    hfinval int,
    hoi_yn int,
    hoival int,
    htotval int,
    hearnval int,
    hothval int,
    hhinc int,
    hmcare int,
    hmcaid int,
    hchamp int,
    hhi_yn int,
    hhstatus int,
    hunder18 int,
    htop5pct int,
    hpctcut int,
    hsup_wgt int,
    h1tenure int,
    h1livqrt int,
    h1telhhd int,
    h1telavl int,
    h1telint int,
    i_hhotlu int,
    i_hhotno int,
    i_hflunc int,
    i_hflunn int,
    i_hpubli int,
    i_hloren int,
    i_hfoods int,
    i_hfdval int,
    i_hfoodn int,
    i_hfoodm int,
    i_hengas int,
    i_hengva int,
    h_idnum2 int,
    prop_tax int,
    housret int,
    hrhtype int,
    h_idnum1 int,
    i_hunits int,
    hrpaidcc int,
    hprop_val int,
    thprop_val int,
    i_propval int,
    hrnumwic int,
    hrwicyn int,
    hfdval int,
    tcare_val int,
    care_val int,
    i_careval int,
    hpres_mort int,
    frecord int,
    fh_seq int,
    ffpos int,
    fkind int,
    ftype int,
    fpersons int,
    fheadidx int,
    fwifeidx int,
    fhusbidx int,
    fspouidx int,
    flastidx int,
    fmlasidx int,
    fownu6 int,
    fownu18 int,
    frelu6 int,
    frelu18 int,
    fpctcut int,
    fpovcut int,
    famlis int,
    povll int,
    frspov int,
    frsppct int,
    finc_ws int,
    fwsval int,
    finc_se int,
    fseval int,
    finc_fr int,
    ffrval int,
    finc_uc int,
    fucval int,
    finc_wc int,
    fwcval int,
    finc_ss int,
    fssval int,
    finc_ssi int,
    fssival int,
    finc_paw int,
    fpawval int,
    finc_vet int,
    fvetval int,
    finc_sur int,
    fsurval int,
    finc_dis int,
    fdisval int,
    finc_ret int,
    fretval int,
    finc_int int,
    fintval int,
    finc_div int,
    fdivval int,
    finc_rnt int,
    frntval int,
    finc_ed int,
    fedval int,
    finc_csp int,
    fcspval int,
    finc_alm int,
    falmval int,
    finc_fin int,
    ffinval int,
    finc_oi int,
    foival int,
    ftotval int,
    fearnval int,
    fothval int,
    ftot_r int,
    fspanish int,
    fsup_wgt int,
    ffposold int,
    f_mv_fs int,
    f_mv_sl int,
    ffngcare int,
    ffngcaid int,
    fhoussub int,
    ffoodreq int,
    fhousreq int,
    fhip_val int,
    fmoop int,
    fotc_val int,
    fmed_val int,
    i_fhipval int,
    precord int,
    ph_seq int,
    pppos int,
    ppposold int,
    a_lineno int,
    a_parent int,
    a_exprrp int,
    perrp int,
    a_age int,
    a_maritl int,
    a_spouse int,
    a_sex int,
    a_hga int,
    prdtrace int,
    p_stat int,
    prpertyp int,
    pehspnon int,
    prdthsp int,
    a_famnum int,
    a_famtyp int,
    a_famrel int,
    a_pfrel int,
    hhdrel int,
    famrel int,
    hhdfmx int,
    parent int,
    age1 int,
    phf_seq int,
    pf_seq int,
    pecohab int,
    pelnmom int,
    pelndad int,
    pemomtyp int,
    pedadtyp int,
    peafever int,
    peafwhn1 int,
    peafwhn2 int,
    peafwhn3 int,
    peafwhn4 int,
    pedisear int,
    pediseye int,
    pedisrem int,
    pedisphy int,
    pedisdrs int,
    pedisout int,
    prdisflg int,
    penatvty int,
    pemntvty int,
    pefntvty int,
    peinusyr int,
    prcitshp int,
    peridnum int,
    fl_665 int,
    prdasian int,
    a_fnlwgt int,
    a_ernlwt int,
    marsupwt int,
    a_hrs1 int,
    a_uslft int,
    a_whyabs int,
    a_payabs int,
    peioind int,
    peioocc int,
    a_clswkr int,
    a_wkslk int,
    a_whenlj int,
    a_nlflj int,
    a_wantjb int,
    prerelg int,
    a_uslhrs int,
    a_hrlywk int,
    a_hrspay int,
    a_grswk int,
    a_unmem int,
    a_uncov int,
    a_enrlw int,
    a_hscol int,
    a_ftpt int,
    a_lfsr int,
    a_untype int,
    a_wkstat int,
    a_explf int,
    a_wksch int,
    a_civlf int,
    a_ftlf int,
    a_mjind int,
    a_dtind int,
    a_mjocc int,
    a_dtocc int,
    peio1cow int,
    prcow1 int,
    pemlr int,
    pruntype int,
    prwkstat int,
    prptrea int,
    prdisc int,
    peabsrsn int,
    prnlfsch int,
    pehruslt int,
    workyn int,
    wrk_ck int,
    wtemp int,
    nwlook int,
    nwlkwk int,
    rsnnotw int,
    wkswork int,
    wkcheck int,
    losewks int,
    lknone int,
    lkweeks int,
    lkstrch int,
    pyrsn int,
    phmemprs int,
    hrswk int,
    hrcheck int,
    ptyn int,
    ptweeks int,
    ptrsn int,
    wexp int,
    wewkrs int,
    welknw int,
    weuemp int,
    earner int,
    clwk int,
    weclw int,
    poccu2 int,
    wemocg int,
    weind int,
    wemind int,
    ljcw int,
    industry int,
    occup int,
    noemp int,
    nxtres int,
    mig_cbst int,
    migsame int,
    mig_reg int,
    mig_st int,
    mig_dscp int,
    gediv int,
    mig_div int,
    mig_mtr1 int,
    mig_mtr3 int,
    mig_mtr4 int,
    ern_yn int,
    ern_srce int,
    ern_otr int,
    ern_val int,
    wageotr int,
    wsal_yn int,
    wsal_val int,
    ws_val int,
    seotr int,
    semp_yn int,
    semp_val int,
    se_val int,
    frmotr int,
    frse_yn int,
    frse_val int,
    frm_val int,
    uc_yn int,
    subuc int,
    strkuc int,
    uc_val int,
    wc_yn int,
    wc_type int,
    wc_val int,
    ss_yn int,
    ss_val int,
    resnss1 int,
    resnss2 int,
    sskidyn int,
    ssi_yn int,
    ssi_val int,
    resnssi1 int,
    resnssi2 int,
    ssikidyn int,
    paw_yn int,
    paw_typ int,
    paw_mon int,
    paw_val int,
    vet_yn int,
    vet_typ1 int,
    vet_typ2 int,
    vet_typ3 int,
    vet_typ4 int,
    vet_typ5 int,
    vet_qva int,
    vet_val int,
    sur_yn int,
    sur_sc1 int,
    sur_sc2 int,
    sur_val1 int,
    sur_val2 int,
    srvs_val int,
    dis_hp int,
    dis_cs int,
    dis_yn int,
    dis_sc1 int,
    dis_sc2 int,
    dis_val1 int,
    dis_val2 int,
    dsab_val int,
    ret_yn int,
    ret_sc1 int,
    ret_sc2 int,
    ret_val1 int,
    ret_val2 int,
    rtm_val int,
    int_yn int,
    int_val int,
    div_yn int,
    div_non int,
    div_val int,
    rnt_yn int,
    rnt_val int,
    ed_yn int,
    oed_typ1 int,
    oed_typ2 int,
    oed_typ3 int,
    ed_val int,
    csp_yn int,
    csp_val int,
    alm_yn int,
    alm_val int,
    fin_yn int,
    fin_val int,
    oi_off int,
    oi_yn int,
    oi_val int,
    ptotval int,
    pearnval int,
    pothval int,
    ptot_r int,
    perlis int,
    pov_univ int,
    wicyn int,
    mcare int,
    p_mvcare int,
    mcaid int,
    p_mvcaid int,
    champ int,
    hi_yn int,
    hiown int,
    hiemp int,
    hipaid int,
    emcontrb int,
    hi int,
    hityp int,
    dephi int,
    hilin1 int,
    hilin2 int,
    paid int,
    hiout int,
    priv int,
    prityp int,
    depriv int,
    pilin1 int,
    pilin2 int,
    pout int,
    zout int, -- changed from out to prevent reserved name error
    care int,
    caid int,
    mon int,
    oth int,
    otyp_1 int,
    otyp_2 int,
    otyp_3 int,
    otyp_4 int,
    otyp_5 int,
    othstper int,
    othstyp1 int,
    othstyp2 int,
    othstyp3 int,
    othstyp4 int,
    othstyp5 int,
    othstyp6 int,
    hea int,
    ihsflg int,
    ahiper int,
    ahityp1 int,
    ahityp2 int,
    ahityp3 int,
    ahityp4 int,
    ahityp5 int,
    ahityp6 int,
    pchip int,
    cov_gh int,
    cov_hi int,
    ch_mc int,
    ch_hi int,
    marg_tax int,
    ctc_crd int,
    penplan int,
    penincl int,
    filestat int,
    dep_stat int,
    eit_cred int,
    actc_crd int,
    fica int,
    fed_ret int,
    agi int,
    tax_inc int,
    fedtax_bc int,
    fedtax_ac int,
    statetax_bc int,
    statetax_ac int,
    prswkxpns int,
    paidccyn int,
    paidcyna int,
    moop int,
    phip_val int,
    potc_val int,
    pmed_val int,
    chsp_val int,
    chsp_yn int,
    chelsew_yn int,
    axrrp int,
    axage int,
    axmaritl int,
    axspouse int,
    axsex int,
    axhga int,
    pxrace1 int,
    pxhspnon int,
    pxcohab int,
    pxlnmom int,
    pxlndad int,
    pxmomtyp int,
    pxdadtyp int,
    pxafever int,
    pxafwhn1 int,
    pxdisear int,
    pxdiseye int,
    pxdisrem int,
    pxdisphy int,
    pxdisdrs int,
    pxdisout int,
    pxnatvty int,
    pxmntvty int,
    pxfntvty int,
    pxinusyr int,
    prwernal int,
    prhernal int,
    axhrs int,
    axwhyabs int,
    axpayabs int,
    axclswkr int,
    axnlflj int,
    axuslhrs int,
    axhrlywk int,
    axunmem int,
    axuncov int,
    axenrlw int,
    axhscol int,
    axftpt int,
    axlfsr int,
    i_workyn int,
    i_wtemp int,
    i_nwlook int,
    i_nwlkwk int,
    i_rsnnot int,
    i_wkswk int,
    i_wkchk int,
    i_losewk int,
    i_lkweek int,
    i_lkstr int,
    i_pyrsn int,
    i_phmemp int,
    i_hrswk int,
    i_hrchk int,
    i_ptyn int,
    i_ptwks int,
    i_ptrsn int,
    i_ljcw int,
    i_indus int,
    i_occup int,
    i_noemp int,
    i_nxtres int,
    i_mig1 int,
    i_mig2 int,
    i_mig3 int,
    i_disyn int,
    i_ernyn int,
    i_ernsrc int,
    i_ernval int,
    i_retsc2 int,
    i_wsyn int,
    i_wsval int,
    i_seyn int,
    i_seval int,
    i_frmyn int,
    i_frmval int,
    i_ucyn int,
    i_ucval int,
    i_wcyn int,
    i_wctyp int,
    i_wcval int,
    i_ssyn int,
    i_ssval int,
    resnssa int,
    i_ssiyn int,
    sskidyna int,
    i_ssival int,
    resnssia int,
    i_pawyn int,
    ssikdyna int,
    i_pawtyp int,
    i_pawmo int,
    i_pawval int,
    i_vetyn int,
    i_vettyp int,
    i_vetqva int,
    i_vetval int,
    i_suryn int,
    i_sursc1 int,
    i_sursc2 int,
    i_survl1 int,
    i_survl2 int,
    i_dishp int,
    i_discs int,
    i_dissc1 int,
    i_dissc2 int,
    i_disvl1 int,
    i_disvl2 int,
    i_retyn int,
    i_retsc1 int,
    i_retvl1 int,
    i_retvl2 int,
    i_intyn int,
    i_intval int,
    i_divyn int,
    i_divval int,
    i_rntyn int,
    i_rntval int,
    i_edyn int,
    i_edtyp1 int,
    i_edtyp2 int,
    i_oedval int,
    i_cspyn int,
    i_cspval int,
    i_almyn int,
    i_almval int,
    i_finyn int,
    i_finval int,
    i_oival int,
    wicyna int,
    i_hi int,
    i_dephi int,
    i_paid int,
    i_hiout int,
    i_priv int,
    i_depriv int,
    i_pout int,
    i_out int,
    i_care int,
    i_caid int,
    i_mon int,
    i_oth int,
    i_otyp int,
    i_ostper int,
    i_ostyp int,
    i_hea int,
    iahiper int,
    iahityp int,
    i_pchip int,
    i_penpla int,
    i_peninc int,
    i_phipval int,
    i_potcval int,
    i_pmedval int,
    i_chspval int,
    i_chspyn int,
    i_chelsewyn int,
    a_werntf int,
    a_herntf int,
    tcernval int,
    tcwsval int,
    tcseval int,
    tcffmval int,
    tsurval1 int,
    tsurval2 int,
    tdisval1 int,
    tdisval2 int,
    tretval1 int,
    tretval2 int,
    tint_val int,
    tdiv_val int,
    trnt_val int,
    ted_val int,
    tcsp_val int,
    talm_val int,
    tfin_val int,
    toi_val int,
    tphip_val int,
    tpotc_val int,
    tpmed_val int,
    tchsp_val int
);


-- you should copy the dataset to the following path in order to import it
LOAD DATA INFILE "/usr/local/tmp/cpsmar2014.csv"
   INTO TABLE census_cps_all
   COLUMNS TERMINATED BY ','
   OPTIONALLY ENCLOSED BY '"'
   ESCAPED BY '"'
   LINES TERMINATED BY '\n'
   IGNORE 1 LINES;

CREATE TABLE census_states_decode (
    state_id int,
    state_name varchar(20)
);

INSERT INTO census_states_decode (state_id, state_name) VALUES
    (00, "Nonmatch"),
    (01, "Alabama"),
    (02, "Alaska"),
    (04, "Arizona"),
    (05, "Arkansas"),
    (06, "California"),
    (08, "Colorado"),
    (09, "Connecticut"),
    (10, "Delaware"),
    (11, "District of Columbia"),
    (12, "Florida"),
    (13, "Georgia"),
    (15, "Hawaii"),
    (16, "Idaho"),
    (17, "Illinois"),
    (18, "Indiana"),
    (19, "Iowa"),
    (20, "Kansas"),
    (21, "Kentucky"),
    (22, "Louisiana"),
    (23, "Maine"),
    (24, "Maryland"),
    (25, "Massachusetts"),
    (26, "Michigan"),
    (27, "Minnesota"),
    (28, "Mississippi"),
    (29, "Missouri"),
    (30, "Montana"),
    (31, "Nebraska"),
    (32, "Nevada"),
    (33, "New Hampshire"),
    (34, "New Jersey"),
    (35, "New Mexico"),
    (36, "New York"),
    (37, "North Carolina"),
    (38, "North Dakota"),
    (39, "Ohio"),
    (40, "Oklahoma"),
    (41, "Oregon"),
    (42, "Pennsylvania"),
    (44, "Rhode Island"),
    (45, "South Carolina"),
    (46, "South Dakota"),
    (47, "Tennessee"),
    (48, "Texas"),
    (49, "Utah"),
    (50, "Vermont"),
    (51, "Virginia"),
    (53, "Washington"),
    (54, "West Virginia"),
    (55, "Wisconsin"),
    (56, "Wyoming"),
    (96, "Abroad");


CREATE TABLE census_education_decode (
    level_id int,
    level_name varchar(20)
);

INSERT INTO census_education_decode (level_id, level_name) VALUES
    (00, "Child"),
    (31, "High school or less"),
    (32, "High school or less"),
    (33, "High school or less"),
    (34, "High school or less"),
    (35, "High school or less"),
    (36, "High school or less"),
    (37, "High school or less"),
    (38, "High school or less"),
    (39, "High school or less"),
    (40, "Some College"),
    (41, "Some College"),
    (42, "Some College"),
    (43, "Bachelor's"),
    (44, "Master's"),
    (45, "Professional"),
    (46, "Doctorate");


CREATE VIEW census_cps AS SELECT
    a_age as age,
    IF(a_sex=1, "M", "F") as sex,
    census_states_decode.state_name as state,
	if(pehruslt=-4, 40, pehruslt) as weekly_hours,
    wsal_val as annual_wages,
    census_education_decode.level_name as education_level,
    IF(alm_yn=0, NULL, IF(alm_yn=2, 0, 1)) as receiving_alimony, -- no info changed to null, yes to 1, and no to 0
	alm_val as annual_alimony,
    IF(csp_yn=0, NULL, IF(csp_yn=2, 0, 1)) as receiving_child_support, -- no info changed to null, yes to 1, and no to 0
	csp_val as annual_child_support,
	IF(halm_yn=0, NULL, IF(halm_yn=2, 0, 1)) as household_receiving_alimony,
    IF(hcsp_yn=0, NULL, IF(hcsp_yn=2, 0, 1)) as household_receiving_child_support,
	IF(resnssi1=1, 1, 0) as receiving_ssdi,
	IF(hfoodsp=1, 1, 0) as receiving_food_stamps
    FROM census_cps_all, census_states_decode, census_education_decode
    WHERE
        census_states_decode.state_id=census_cps_all.gestfips AND
        census_education_decode.level_id=census_cps_all.a_hga;


CREATE INDEX census_age_index ON census_cps_all (a_age);
CREATE INDEX census_sex_index ON census_cps_all (a_sex);
CREATE INDEX census_state_index ON census_cps_all (gestfips);
CREATE INDEX census_weekly_hours_index ON census_cps_all (pehruslt);
CREATE INDEX census_wages_index ON census_cps_all (wsal_val);
CREATE INDEX census_education_index ON census_cps_all (a_hga);
CREATE INDEX census_alimony_index ON census_cps_all (alm_yn);
CREATE INDEX census_child_support_index ON census_cps_all (csp_yn);
CREATE INDEX census_household_alimony_index ON census_cps_all (halm_yn);
CREATE INDEX census_household_child_support_index ON census_cps_all (hcsp_yn);
CREATE INDEX census_ssdi_index ON census_cps_all (resnssi1);
CREATE INDEX census_food_stamps_index ON census_cps_all (hfoodsp);


DELIMITER ;;
CREATE PROCEDURE median_income_by_state_and_sex()
BEGIN
    # declare variables
    DECLARE currentState, currentSex VARCHAR(20);
    DECLARE currentMedianOffset INT;
    DECLARE done INT DEFAULT FALSE;
 
    # declare cursor, select the offset of the median record for each state/sex combo for wage earners within the target age range (22 to 36 years old)
    DECLARE median_offset_cursor CURSOR FOR
        SELECT state, sex, ((count(*)/2)-1)
        FROM census_cps
        WHERE annual_wages > 0 AND age BETWEEN 22 AND 36 AND weekly_hours >= 30
        GROUP BY state, sex;
 
    # declare handle 
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    # create temporary table to hold results
    DROP TEMPORARY TABLE IF EXISTS median_wages;
    CREATE TEMPORARY TABLE median_wages (state varchar(20), sex varchar(1), median_wage int, sample_size int, avg_hours int); 

    # open cursor
    OPEN median_offset_cursor;
 
    the_loop: LOOP
 
        # get the values of each column into our variables
        FETCH median_offset_cursor INTO currentState, currentSex, currentMedianOffset;

        IF done THEN
          LEAVE the_loop;
        END IF;

        # select the median value for this state/sex combination
        INSERT INTO median_wages (state, sex, median_wage, sample_size, avg_hours)
            SELECT state, sex, annual_wages, (SELECT currentMedianOffset)*2, (SELECT avg(weekly_hours) FROM census_cps WHERE annual_wages>0 AND age BETWEEN 22 AND 36 AND weekly_hours >= 30 AND state = currentState AND sex = currentSex) FROM census_cps
            WHERE annual_wages > 0 AND age BETWEEN 22 AND 36 AND weekly_hours >= 30
                AND state = currentState AND sex = currentSex
            ORDER BY annual_wages
            LIMIT currentMedianOffset,1;
 
    END LOOP the_loop;
 
    CLOSE median_offset_cursor;

    # output the table of medians
    SELECT state, sex, median_wage, sample_size, avg_hours
    FROM median_wages
    ORDER BY state, sex;
END;;
DELIMITER ;


DELIMITER ;;
CREATE PROCEDURE median_income_with_bachelors_by_state_and_sex()
BEGIN
    # declare variables
    DECLARE currentState, currentSex VARCHAR(20);
    DECLARE currentMedianOffset INT;
    DECLARE done INT DEFAULT FALSE;
 
    # declare cursor, select the offset of the median record for each state/sex combo for wage earners within the target age range (22 to 36 years old)
    DECLARE median_offset_cursor CURSOR FOR
        SELECT state, sex, ((count(*)/2)-1)
        FROM census_cps
        WHERE annual_wages > 0 AND age BETWEEN 22 AND 36 AND education_level = "Bachelor's" AND weekly_hours >= 30
        GROUP BY state, sex;
 
    # declare handle 
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    # create temporary table to hold results
    DROP TEMPORARY TABLE IF EXISTS median_wages;
    CREATE TEMPORARY TABLE median_wages (state varchar(20), sex varchar(1), median_wage int, sample_size int, avg_hours int); 

    # open cursor
    OPEN median_offset_cursor;
 
    the_loop: LOOP
 
        # get the values of each column into our variables
        FETCH median_offset_cursor INTO currentState, currentSex, currentMedianOffset;

        IF done THEN
          LEAVE the_loop;
        END IF;

        # select the median value for this state/sex combination
        INSERT INTO median_wages (state, sex, median_wage, sample_size, avg_hours)
            SELECT state, sex, annual_wages, (SELECT currentMedianOffset)*2, (SELECT avg(weekly_hours) FROM census_cps WHERE annual_wages>0 AND age BETWEEN 22 AND 36 AND education_level = "Bachelor's" AND weekly_hours >= 30 AND state = currentState AND sex = currentSex) FROM census_cps
            WHERE annual_wages > 0 AND age BETWEEN 22 AND 36 AND education_level = "Bachelor's" AND weekly_hours >= 30
                AND state = currentState AND sex = currentSex
            ORDER BY annual_wages
            LIMIT currentMedianOffset,1;
 
    END LOOP the_loop;
 
    CLOSE median_offset_cursor;

    # output the table of medians
    SELECT state, sex, median_wage, sample_size, avg_hours
    FROM median_wages
    ORDER BY state, sex;
END;;
DELIMITER ;

